// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "12/14/2021 15:28:59"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module \4bitFullAdder  (
	Cout,
	A,
	B,
	ADD_n,
	Overflow,
	S);
output 	Cout;
input 	[3:0] A;
input 	[3:0] B;
input 	ADD_n;
output 	Overflow;
output 	[3:0] S;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Cout~output_o ;
wire \Overflow~output_o ;
wire \S[3]~output_o ;
wire \S[2]~output_o ;
wire \S[1]~output_o ;
wire \S[0]~output_o ;
wire \A[3]~input_o ;
wire \B[3]~input_o ;
wire \ADD_n~input_o ;
wire \A[2]~input_o ;
wire \B[2]~input_o ;
wire \A[1]~input_o ;
wire \B[1]~input_o ;
wire \A[0]~input_o ;
wire \B[0]~input_o ;
wire \inst1|inst3~combout ;
wire \inst3|inst3~combout ;
wire \inst4~combout ;
wire \inst3|inst1~combout ;
wire \inst2|inst1~combout ;
wire \inst1|inst1~combout ;
wire \inst|inst0~combout ;


cyclonev_io_obuf \Cout~output (
	.i(\inst3|inst3~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Cout~output_o ),
	.obar());
// synopsys translate_off
defparam \Cout~output .bus_hold = "false";
defparam \Cout~output .open_drain_output = "false";
defparam \Cout~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Overflow~output (
	.i(\inst4~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Overflow~output_o ),
	.obar());
// synopsys translate_off
defparam \Overflow~output .bus_hold = "false";
defparam \Overflow~output .open_drain_output = "false";
defparam \Overflow~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \S[3]~output (
	.i(\inst3|inst1~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[3]~output .bus_hold = "false";
defparam \S[3]~output .open_drain_output = "false";
defparam \S[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \S[2]~output (
	.i(\inst2|inst1~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[2]~output .bus_hold = "false";
defparam \S[2]~output .open_drain_output = "false";
defparam \S[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \S[1]~output (
	.i(\inst1|inst1~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[1]~output .bus_hold = "false";
defparam \S[1]~output .open_drain_output = "false";
defparam \S[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \S[0]~output (
	.i(\inst|inst0~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[0]~output .bus_hold = "false";
defparam \S[0]~output .open_drain_output = "false";
defparam \S[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \A[3]~input (
	.i(A[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[3]~input_o ));
// synopsys translate_off
defparam \A[3]~input .bus_hold = "false";
defparam \A[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \B[3]~input (
	.i(B[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\B[3]~input_o ));
// synopsys translate_off
defparam \B[3]~input .bus_hold = "false";
defparam \B[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \ADD_n~input (
	.i(ADD_n),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\ADD_n~input_o ));
// synopsys translate_off
defparam \ADD_n~input .bus_hold = "false";
defparam \ADD_n~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \A[2]~input (
	.i(A[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[2]~input_o ));
// synopsys translate_off
defparam \A[2]~input .bus_hold = "false";
defparam \A[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \B[2]~input (
	.i(B[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\B[2]~input_o ));
// synopsys translate_off
defparam \B[2]~input .bus_hold = "false";
defparam \B[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \A[1]~input (
	.i(A[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[1]~input_o ));
// synopsys translate_off
defparam \A[1]~input .bus_hold = "false";
defparam \A[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \B[1]~input (
	.i(B[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\B[1]~input_o ));
// synopsys translate_off
defparam \B[1]~input .bus_hold = "false";
defparam \B[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \A[0]~input (
	.i(A[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[0]~input_o ));
// synopsys translate_off
defparam \A[0]~input .bus_hold = "false";
defparam \A[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \B[0]~input (
	.i(B[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\B[0]~input_o ));
// synopsys translate_off
defparam \B[0]~input .bus_hold = "false";
defparam \B[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \inst1|inst3 (
// Equation(s):
// \inst1|inst3~combout  = ( \B[0]~input_o  & ( (!\A[1]~input_o  & (\A[0]~input_o  & (!\ADD_n~input_o  $ (!\B[1]~input_o )))) # (\A[1]~input_o  & ((!\ADD_n~input_o  $ (!\B[1]~input_o )) # (\A[0]~input_o ))) ) ) # ( !\B[0]~input_o  & ( (!\B[1]~input_o  & 
// (\ADD_n~input_o )) # (\B[1]~input_o  & ((\A[1]~input_o ))) ) )

	.dataa(!\ADD_n~input_o ),
	.datab(!\A[1]~input_o ),
	.datac(!\B[1]~input_o ),
	.datad(!\A[0]~input_o ),
	.datae(!\B[0]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst1|inst3~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst1|inst3 .extended_lut = "off";
defparam \inst1|inst3 .lut_mask = 64'h5353127B5353127B;
defparam \inst1|inst3 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \inst3|inst3 (
// Equation(s):
// \inst3|inst3~combout  = ( \B[2]~input_o  & ( \inst1|inst3~combout  & ( (!\B[3]~input_o  & (((\ADD_n~input_o  & \A[2]~input_o )) # (\A[3]~input_o ))) # (\B[3]~input_o  & ((!\ADD_n~input_o ) # ((\A[3]~input_o  & \A[2]~input_o )))) ) ) ) # ( !\B[2]~input_o  
// & ( \inst1|inst3~combout  & ( (!\B[3]~input_o  & (((\A[3]~input_o  & \A[2]~input_o )) # (\ADD_n~input_o ))) # (\B[3]~input_o  & (((!\ADD_n~input_o  & \A[2]~input_o )) # (\A[3]~input_o ))) ) ) ) # ( \B[2]~input_o  & ( !\inst1|inst3~combout  & ( 
// (!\B[3]~input_o  & (\A[3]~input_o  & ((\A[2]~input_o ) # (\ADD_n~input_o )))) # (\B[3]~input_o  & (!\ADD_n~input_o  & ((\A[2]~input_o ) # (\A[3]~input_o )))) ) ) ) # ( !\B[2]~input_o  & ( !\inst1|inst3~combout  & ( (!\B[3]~input_o  & (\ADD_n~input_o  & 
// ((\A[2]~input_o ) # (\A[3]~input_o )))) # (\B[3]~input_o  & (\A[3]~input_o  & ((!\ADD_n~input_o ) # (\A[2]~input_o )))) ) ) )

	.dataa(!\A[3]~input_o ),
	.datab(!\B[3]~input_o ),
	.datac(!\ADD_n~input_o ),
	.datad(!\A[2]~input_o ),
	.datae(!\B[2]~input_o ),
	.dataf(!\inst1|inst3~combout ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst3|inst3~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst3|inst3 .extended_lut = "off";
defparam \inst3|inst3 .lut_mask = 64'h141D14741D7D747D;
defparam \inst3|inst3 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb inst4(
// Equation(s):
// \inst4~combout  = ( \B[2]~input_o  & ( \inst1|inst3~combout  & ( (!\A[2]~input_o  & (!\B[3]~input_o  & (!\A[3]~input_o  $ (\ADD_n~input_o )))) # (\A[2]~input_o  & (!\A[3]~input_o  & (!\B[3]~input_o  $ (\ADD_n~input_o )))) ) ) ) # ( !\B[2]~input_o  & ( 
// \inst1|inst3~combout  & ( (!\A[2]~input_o  & (\B[3]~input_o  & (!\A[3]~input_o  $ (!\ADD_n~input_o )))) # (\A[2]~input_o  & (!\A[3]~input_o  & (!\B[3]~input_o  $ (\ADD_n~input_o )))) ) ) ) # ( \B[2]~input_o  & ( !\inst1|inst3~combout  & ( (!\A[2]~input_o  
// & (\A[3]~input_o  & (!\B[3]~input_o  $ (!\ADD_n~input_o )))) # (\A[2]~input_o  & (!\B[3]~input_o  & (!\A[3]~input_o  $ (\ADD_n~input_o )))) ) ) ) # ( !\B[2]~input_o  & ( !\inst1|inst3~combout  & ( (!\A[2]~input_o  & (\A[3]~input_o  & (!\B[3]~input_o  $ 
// (!\ADD_n~input_o )))) # (\A[2]~input_o  & (\B[3]~input_o  & (!\A[3]~input_o  $ (!\ADD_n~input_o )))) ) ) )

	.dataa(!\A[3]~input_o ),
	.datab(!\B[3]~input_o ),
	.datac(!\ADD_n~input_o ),
	.datad(!\A[2]~input_o ),
	.datae(!\B[2]~input_o ),
	.dataf(!\inst1|inst3~combout ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst4~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst4.extended_lut = "off";
defparam inst4.lut_mask = 64'h1412148412828482;
defparam inst4.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \inst3|inst1 (
// Equation(s):
// \inst3|inst1~combout  = ( \B[2]~input_o  & ( \inst1|inst3~combout  & ( !\A[3]~input_o  $ (!\B[3]~input_o  $ (((!\ADD_n~input_o ) # (!\A[2]~input_o )))) ) ) ) # ( !\B[2]~input_o  & ( \inst1|inst3~combout  & ( !\A[3]~input_o  $ (!\B[3]~input_o  $ 
// (((!\ADD_n~input_o  & \A[2]~input_o )))) ) ) ) # ( \B[2]~input_o  & ( !\inst1|inst3~combout  & ( !\A[3]~input_o  $ (!\B[3]~input_o  $ (((\A[2]~input_o ) # (\ADD_n~input_o )))) ) ) ) # ( !\B[2]~input_o  & ( !\inst1|inst3~combout  & ( !\A[3]~input_o  $ 
// (!\B[3]~input_o  $ (((\ADD_n~input_o  & !\A[2]~input_o )))) ) ) )

	.dataa(!\A[3]~input_o ),
	.datab(!\B[3]~input_o ),
	.datac(!\ADD_n~input_o ),
	.datad(!\A[2]~input_o ),
	.datae(!\B[2]~input_o ),
	.dataf(!\inst1|inst3~combout ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst3|inst1~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst3|inst1 .extended_lut = "off";
defparam \inst3|inst1 .lut_mask = 64'h6966699966969996;
defparam \inst3|inst1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \inst2|inst1 (
// Equation(s):
// \inst2|inst1~combout  = !\ADD_n~input_o  $ (!\A[2]~input_o  $ (!\B[2]~input_o  $ (!\inst1|inst3~combout )))

	.dataa(!\ADD_n~input_o ),
	.datab(!\A[2]~input_o ),
	.datac(!\B[2]~input_o ),
	.datad(!\inst1|inst3~combout ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst2|inst1~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst2|inst1 .extended_lut = "off";
defparam \inst2|inst1 .lut_mask = 64'h6996699669966996;
defparam \inst2|inst1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \inst1|inst1 (
// Equation(s):
// \inst1|inst1~combout  = ( \B[0]~input_o  & ( !\ADD_n~input_o  $ (!\A[1]~input_o  $ (!\B[1]~input_o  $ (!\A[0]~input_o ))) ) ) # ( !\B[0]~input_o  & ( !\A[1]~input_o  $ (!\B[1]~input_o ) ) )

	.dataa(!\ADD_n~input_o ),
	.datab(!\A[1]~input_o ),
	.datac(!\B[1]~input_o ),
	.datad(!\A[0]~input_o ),
	.datae(!\B[0]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst1|inst1~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst1|inst1 .extended_lut = "off";
defparam \inst1|inst1 .lut_mask = 64'h3C3C69963C3C6996;
defparam \inst1|inst1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \inst|inst0 (
// Equation(s):
// \inst|inst0~combout  = !\A[0]~input_o  $ (!\B[0]~input_o )

	.dataa(!\A[0]~input_o ),
	.datab(!\B[0]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst|inst0~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst|inst0 .extended_lut = "off";
defparam \inst|inst0 .lut_mask = 64'h6666666666666666;
defparam \inst|inst0 .shared_arith = "off";
// synopsys translate_on

assign Cout = \Cout~output_o ;

assign Overflow = \Overflow~output_o ;

assign S[3] = \S[3]~output_o ;

assign S[2] = \S[2]~output_o ;

assign S[1] = \S[1]~output_o ;

assign S[0] = \S[0]~output_o ;

endmodule
