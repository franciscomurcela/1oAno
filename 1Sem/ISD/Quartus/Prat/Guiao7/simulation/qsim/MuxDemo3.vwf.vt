// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/07/2021 15:36:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MuxDemo3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MuxDemo3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] S;
reg x0;
reg x1;
reg x2;
reg x3;
reg x4;
reg x5;
reg x6;
reg x7;
reg x8;
reg x9;
reg x10;
reg x11;
reg x12;
reg x13;
reg x14;
reg x15;
// wires                                               
wire f;

// assign statements (if any)                          
MuxDemo3 i1 (
// port map - connection between master ports and signals/registers   
	.f(f),
	.S(S),
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.x4(x4),
	.x5(x5),
	.x6(x6),
	.x7(x7),
	.x8(x8),
	.x9(x9),
	.x10(x10),
	.x11(x11),
	.x12(x12),
	.x13(x13),
	.x14(x14),
	.x15(x15)
);
initial 
begin 
#1000000 $finish;
end 
// S[ 3 ]
initial
begin
	S[3] = 1'b0;
	S[3] = #800000 1'b1;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b0;
	S[2] = #400000 1'b1;
	S[2] = #400000 1'b0;
end 
// S[ 1 ]
initial
begin
	repeat(2)
	begin
		S[1] = 1'b0;
		S[1] = #200000 1'b1;
		# 200000;
	end
	S[1] = 1'b0;
end 
// S[ 0 ]
always
begin
	S[0] = 1'b0;
	S[0] = #100000 1'b1;
	#100000;
end 

// x0
initial
begin
	x0 = 1'b1;
	x0 = #100000 1'b0;
end 

// x1
initial
begin
	x1 = 1'b0;
	x1 = #100000 1'b1;
	x1 = #100000 1'b0;
end 

// x2
initial
begin
	x2 = 1'b0;
	x2 = #200000 1'b1;
	x2 = #100000 1'b0;
end 

// x3
initial
begin
	x3 = 1'b0;
	x3 = #300000 1'b1;
	x3 = #100000 1'b0;
end 

// x4
initial
begin
	x4 = 1'b0;
end 

// x5
initial
begin
	x5 = 1'b0;
end 

// x6
initial
begin
	x6 = 1'b0;
end 

// x7
initial
begin
	x7 = 1'b0;
end 

// x8
initial
begin
	x8 = 1'b0;
end 

// x9
initial
begin
	x9 = 1'b0;
end 

// x10
initial
begin
	x10 = 1'b0;
end 

// x11
initial
begin
	x11 = 1'b0;
end 

// x12
initial
begin
	x12 = 1'b0;
end 

// x13
initial
begin
	x13 = 1'b0;
end 

// x14
initial
begin
	x14 = 1'b0;
end 

// x15
initial
begin
	x15 = 1'b0;
end 
endmodule

